#include <M5Core2.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
//#include <BLE2902.h>
#include <JWT_RS256.h>

JWT_RS256 token_manager;

bool isTokenValid = false;

String jwtToken = "";


// Example sound data (a simple beep sound)
const unsigned char soundData[] = {
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Example sound data (a simple beep sound)
const unsigned char unlockSoundData[] = {
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x52, 0x49, 0x46, 0x46, 0x24, 0x08, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20,
  0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x1F, 0x00, 0x00, 0x80, 0x3E, 0x00, 0x00,
  0x02, 0x00, 0x10, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const char *rsa_public_key = 
"-----BEGIN PUBLIC KEY-----\n"
"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA729b6ajmBaO7oDL72NkF\n"
"qHJtAEumIO4gorrAai4V7RPReiZ/EX8P2d++9q+F1lKcq+so3UaDzELk8gp9AtVx\n"
"BuQk8G9sLu4QxwM/sPgdz0f8hV3OM603A29XcAv0ztzdV11UYfOXPM1IkzWPCwmV\n"
"MBZpzATrXsQYFGkWe7kwFuz+KgRSAyra/UEdI6iSS3VLUhxVQ3xChO+8VVq9xJpl\n"
"CxXZngbyL9dqY6WRSAocFCiho7VtDY8Rk9gLPLc56pq5J/32F/Uv7tvpGFjL845o\n"
"zGt0LBvoOqIHbWeKza7gVkb6AbY25YLAJaqskc+udRG4KgsXvTovrFkWhYWKWxrp\n"
"0wIDAQAB\n"
"-----END PUBLIC KEY-----";

const size_t soundDataSize = sizeof(soundData);
const size_t unlockSoundDataSize = sizeof(unlockSoundData);

#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define UNLOCK_CHARACTERISTIC_UUID "beb5483f-36e1-4688-b7f5-ea07361b26a8"


BLECharacteristic *pCharacteristic;
BLECharacteristic *unlockCharacteristic;

bool deviceConnected = false;
uint32_t value = 0;
BLEServer *pServer;

void playBeep(){
  M5.Spk.PlaySound(soundData, soundDataSize);
}

void playUnlockSound(){
  M5.Spk.PlaySound(unlockSoundData, unlockSoundDataSize);
}

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      M5.Lcd.println("\nDevice Connected");
      Serial.println("\nDevice Connected");
      playBeep();
      delay(200);
      playBeep();
    };

    void onDisconnect(BLEServer* pServer) {
      playBeep();
      deviceConnected = false;
      M5.Lcd.println(F("\nDevice Disconnected"));
      pServer->getAdvertising()->start();
    }
};

class UnlockCallbacks : public BLECharacteristicCallbacks {
  std::string fullToken = "";  // Buffer to store the concatenated token chunks

  void onWrite(BLECharacteristic *pCharacteristic) {
    std::string tokenChunk = pCharacteristic->getValue();

    if (!tokenChunk.empty()) {
      // Concatenate the received chunk to the full token
      fullToken += tokenChunk;

      // Check if the token chunk contains the end delimiter (e.g., "END_OF_TOKEN")
      size_t endPos = tokenChunk.find("END_OF_TOKEN");
      if (endPos != std::string::npos) {
        M5.Lcd.println(F("END_OF_TOKEN delimiter found."));

        // Remove the "END_OF_TOKEN" delimiter from the full token
        size_t delimiterPos = fullToken.find("END_OF_TOKEN");
        if (delimiterPos != std::string::npos) {
          fullToken = fullToken.substr(0, delimiterPos);
        }

        M5.Lcd.println(F("Full ID Token received:"));

        // Convert to String for validation
        String jwtToken = String(fullToken.c_str());
        M5.Lcd.printf("Assembled Token Length: %d\n", jwtToken.length());

        // Validate the token only after it is fully reassembled
        bool isValid = token_manager.tokenIsValid(jwtToken);
        if (isValid) {
          M5.Lcd.println(F("Valid Token! Unlocking..."));
          // Add unlocking logic here
        } else {
          M5.Lcd.println(F("Invalid Token"));
        }

        // Reset the full token buffer for the next transmission
        fullToken = ""; 
      } else {
        // If the delimiter isn't found, indicate that the token is still incomplete
        M5.Lcd.println(F("Chunk received but no END_OF_TOKEN yet."));
      }
    } else {
      // If the token chunk is empty, indicate that no data was received
      M5.Lcd.println(F("Received empty token chunk."));
    }
  }
};






void setup() {
  M5.begin();
  Serial.begin(115200);




  // Initialize BLE
  BLEDevice::init("M5Stack Core2 BLE Reader");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create BLE Service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create BLE Characteristic
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE
                    );

  //pCharacteristic->addDescriptor(new BLE2902());

  // Create BLE Characteristic
  unlockCharacteristic = pService->createCharacteristic(
                          UNLOCK_CHARACTERISTIC_UUID,
                          BLECharacteristic::PROPERTY_READ |
                          BLECharacteristic::PROPERTY_WRITE
                          );

  unlockCharacteristic->setCallbacks(new UnlockCallbacks());

 
  // Start the service
  pService->start();

  // Start advertising
  pServer->getAdvertising()->start();

  token_manager.rsa_public_key = (char*)rsa_public_key;
  M5.Lcd.print(F("Waiting for a BLE client to connect........."));
  
  

}

void loop() {
  //  delay(1000); // Send new value every second
  //  if (deviceConnected) {
  //    pCharacteristic->setValue(value);
  //   pCharacteristic->notify();
  //    value++;
  //  }
   //else{
     //M5.Lcd.print("\nDevice disconnected");
   //}
  

  
  }




